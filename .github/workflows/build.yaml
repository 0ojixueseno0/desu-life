name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Generate Fonts
      run: pnpm run prepare-fonts

    - name: Build project
      run: pnpm run build

    # - name: Authenticate GitHub CLI
    #   run: gh auth login --with-token <<< "${{ secrets.GH_TOKEN }}"

    - name: Archive production artifact
      run: tar -czvf release.tar.gz -C dist .

    - name: Determine Release Type
      id: release-info
      run: |
        if [[ "${{ github.event.head_commit.message }}" =~ \[release/v([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
          echo "::set-output name=type::release"
          echo "::set-output name=tag_name::v${BASH_REMATCH[1]}"
        else
          echo "::set-output name=type::ci"
          echo "::set-output name=tag_name::ci-${GITHUB_RUN_NUMBER}"
        fi

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ steps.release-info.outputs.tag_name }}" \
          --title="${{ github.repository }} ${{ steps.release-info.outputs.tag_name }}" \
          --generate-notes \
          $([[ "${{ steps.release-info.outputs.type }}" == "ci" ]] && echo "--prerelease") \
          ./release.tar.gz

    - name: Trigger Deploy
      if: ${{ steps.release-info.outputs.type == 'release' }}
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy.yml',
            ref: 'main',
            inputs: {
              tag_name: `${{ steps.release-info.outputs.tag_name }}`
            }
          });
